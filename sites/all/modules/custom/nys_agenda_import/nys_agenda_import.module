<?php

/**
 * @file
 * A module to import agendas from OpenLeg.
 */

/**
 * Implements hook_help().
 */
function nys_agenda_import_help($path, $arg) {
  if ($path == "admin/help#nys_agenda_import") {
    return '<p>' . t("A module to import agendas from OpenLeg.") . '</p>';
  }
}

/**
 * Maps the API's response to agenda fields.
 *
 * @param object $node
 *   The node entity we're mapping values to.
 * @param object $agenda
 *   The result returned from the agenda API.
 * @param string $committee
 *   The committee for this agenda.
 * @param int $year
 *   The year for this agenda.
 * @param int $week
 *   The week for this agenda.
 */
function nys_agenda_import_set_values(&$node, $agenda, $committee, $year, $week
) {
  if (!empty($agenda->addendumId)) {
    $node->field_ol_agenda_addendum[LANGUAGE_NONE][0]['value']
      = $agenda->addendumId;
  }
  $node->field_ol_year[LANGUAGE_NONE][0]['value'] = $year;
  $node->field_ol_week[LANGUAGE_NONE][0]['value'] = $week;
  $node->field_ol_meeting_date[LANGUAGE_NONE][0]['value'] = strtotime(
    $agenda->meeting->meetingDateTime
  );
  $node->field_ol_agenda_location[LANGUAGE_NONE][0]['value']
    = $agenda->meeting->location;
  $node->field_ol_agenda_notes[LANGUAGE_NONE][0]['value']
    = $agenda->meeting->notes;

  // Reference committee, if possible.
  $vocabulary_id = 11;
  $committee_tid = db_query(
    "SELECT tid FROM {taxonomy_term_data}\n" .
    "WHERE name = :myname AND vid = :myvocabulary",
    [":myname" => $committee, ":myvocabulary" => $vocabulary_id]
  )->fetchField();
  if ($committee_tid !== FALSE) {
    $node->field_ol_committee[LANGUAGE_NONE][0]['target_id'] = $committee_tid;
  }
  $node->field_ol_committee_name[LANGUAGE_NONE][0]['value'] = $committee;

  $node->field_from_openleg[LANGUAGE_NONE][0]['value'] = TRUE;
}

/**
 * Maps the API's response to field collections.
 *
 * @param object $node
 *   The node entity we're mapping values to.
 * @param object $meeting
 *   The result returned from the agenda API.
 * @param array $vote_map
 *   Map of votes for all meetings of this committee
 */
function nys_agenda_import_set_field_collection(&$node, $meeting, $vote_map) {
  if (isset($meeting->bills->items)) {
    foreach ($meeting->bills->items as $index => $bill) {
      // Create the new field collection.
      $field_collection_item = entity_create(
        'field_collection_item', ['field_name' => 'field_ol_agenda_bills']
      );
      $field_collection_item->setHostEntity('node', $node);

      // Reference the bill, if possible.
      $bill_nid = db_query(
        "SELECT node.nid FROM node, field_data_field_ol_session\n" .
        "WHERE node.title = :mytitle\n" .
        "  AND node.nid = field_data_field_ol_session.entity_id\n" .
        "  AND field_data_field_ol_session.field_ol_session_value = :mysession",
        [
          ":mytitle"   => $bill->billId->printNo,
          ":mysession" => $bill->billId->session,
        ]
      )->fetchField();
      if ($bill_nid !== FALSE) {
        $field_collection_item->field_ol_bill["und"][$index]["target_id"]
          = $bill_nid;
      }

      $field_collection_item->field_ol_bill_name["und"][0]["value"]
        = json_encode($bill);

      if (array_key_exists($bill->billId->printNo, $vote_map)) {
        $current_vote = $vote_map[$bill->billId->printNo];

        $field_collection_item->field_ol_aye_count["und"][0]["value"]
          = nys_agenda_import_extract_vote_count($current_vote, 'AYE');
        $field_collection_item->field_ol_nay_count["und"][0]["value"]
          = nys_agenda_import_extract_vote_count($current_vote, 'NAY');
        $field_collection_item->field_ol_aye_wr_count["und"][0]["value"]
          = nys_agenda_import_extract_vote_count($current_vote, 'AYEWR');
        $field_collection_item->field_ol_excused_count["und"][0]["value"]
          = nys_agenda_import_extract_vote_count($current_vote, 'EXC');
        $field_collection_item->field_ol_abstained_count["und"][0]["value"]
          = nys_agenda_import_extract_vote_count($current_vote, 'ABD');
        $field_collection_item->field_ol_absent_count["und"][0]["value"]
          = nys_agenda_import_extract_vote_count($current_vote, 'ABS');

        // Store the action.
        if ($current_vote->action == "REFERRED_TO_COMMITTEE"
          && isset($current_vote->referCommittee->name)
        ) {
          $field_collection_item->field_ol_bill_message["und"][$index]["value"]
            = $current_vote->referCommittee->name;
        }
      }

      // Save the field collection.
      $field_collection_item->save();
    }
  }
}

/**
 * Extracts the number of votes for the given vote code from the given vote.
 *
 * @param object $vote
 *   A vote json object.
 * @param string $vote_code
 *   A vote code.
 *
 * @return int
 *   The vote count.
 */
function nys_agenda_import_extract_vote_count($vote, $vote_code) {
  if (isset($vote->vote->memberVotes->items->$vote_code->size)) {
    return $vote->vote->memberVotes->items->$vote_code->size;
  }
  return 0;
}

/**
 * Implements hook_cron().
 */
function nys_agenda_import_cron() {

  $interval = variable_get("agenda_import_interval", 60 * 5);
  $timestamp = variable_get("agenda_import_last_update", "2000-01-01T00:00:00");

  // Check the lock.
  $is_locked = variable_get("agenda_import_is_locked", FALSE);
  $last_lock_time = variable_get(
    "agenda_import_last_lock_time", strtotime("now")
  );

  // If another process isn't running or that process has been locked > 5
  // minutes.
  if (!$is_locked || (strtotime("now") - $last_lock_time) > 300) {
    // Update the lock.
    variable_set("agenda_import_is_locked", TRUE);
    variable_set("agenda_import_last_lock_time", strtotime("now"));

    nys_agenda_import_run($timestamp);
    variable_set('agenda_import_next_execution', time() + $interval);
  }
}

/**
 * First, fetch results from the updates API.
 *
 * Iterate and paginate those results and, per agenda, make a request to the
 * agenda API. Finally, map values and save each agenda as a node.
 */
function nys_agenda_import_run($timestamp) {
  $ol_base_url = variable_get("openleg_base_url");
  $base_agenda_url = $ol_base_url . "/api/3/agendas/";
  $agenda_updates_base_url = $base_agenda_url . "/updates/";
  // 1000 maximum.
  $limit = 1000;
  $offset = 1;
  $start_record = $offset;
  // Only pull in $throttle per run agendas.
  $throttle = 100000;
  $count = 0;
  $more_results = TRUE;
  $bad_result = FALSE;
  $openleg_key = variable_get("openleg_key");
  $last_processed_datetime = variable_get("agenda_import_last_update");

  // We don't need to retrieve more than the $throttle.
  if ($throttle < $limit) {
    $limit = $throttle;
  }

  while ($more_results) {
    echo "Fetching: " . $agenda_updates_base_url . $timestamp .
      "?offset=" . $offset . "&limit=" . $limit .
      "&order=asc&key=" . $openleg_key . "\r\n";
    $base_result = file_get_contents(
      $agenda_updates_base_url . $timestamp . "?offset=" . $offset . "&limit="
      . $limit . "&order=asc&key=" . $openleg_key
    );
    $base_result = json_decode($base_result);

    if (isset($base_result->success) && $base_result->success) {
      foreach ($base_result->result->items as $item) {
        // Update the lock.
        variable_set("agenda_import_last_lock_time", strtotime("now"));

        $last_processed_datetime = $item->processedDateTime;
        $agenda_year = $item->id->year;
        $agenda_week = $item->id->number;

        $bad_result = !nys_agenda_import_fetch($agenda_year, $agenda_week);

        if (!$bad_result) {
          $count++;
        }

        if ($count >= $throttle) {
          // Hit the $throttle limit, break.
          break;
        }

        // Take a break between each request.
        usleep(100000);
      }

      if ($bad_result) {
        // Bad base result. Stop the update prematurely.
        $more_results = FALSE;
        $offset = $start_record + $count;
        variable_set("agenda_import_offset", $offset);
      }
      else {
        if ($count >= $throttle) {
          // Hit the $throttle limit, don't continue, for now.
          $more_results = FALSE;
          $offset = $start_record + $throttle;
          variable_set("agenda_import_offset", $offset);
        }
        else {
          if ($base_result->offsetEnd < $base_result->total) {
            // Hit the end of this page and there are more pages to go.
            $offset = $base_result->offsetEnd + 1;
            variable_set("agenda_import_offset", $offset);
          }
          else {
            // Hit the end of this page and there are no more pages to go.
            $more_results = FALSE;
            variable_set("agenda_import_last_update", $last_processed_datetime);
            variable_set(
              "agenda_import_last_run", date("Y-m-d\TH:i:s", strtotime("now"))
            );
            variable_set("agenda_import_offset", 1);
          }
        }
      }
    }
    else {
      // Bad base result. Stop the update prematurely.
      $more_results = FALSE;
      $offset = $start_record + $count;
      variable_set("agenda_import_offset", $offset);
    }
  }
}

/**
 * Imports all agendas that currently exist for the given year.
 *
 * @param int $year
 *   The year to import.
 */
function nys_agenda_import_year($year) {
  $ol_base_url = variable_get("openleg_base_url");
  $base_agenda_url = $ol_base_url . "/api/3/agendas/";
  $openleg_key = variable_get("openleg_key");

  $count = 0;

  $url = "${base_agenda_url}${year}?key=${openleg_key}";

  echo t("Fetching @url", ['@url' => $url]) . "\n";
  $response = json_decode(file_get_contents($url));
  if (isset($response->success) && $response->success) {
    foreach ($response->result->items as $agenda_id) {
      nys_agenda_import_fetch($agenda_id->id->year, $agenda_id->id->number);
      $count++;
    }
  }
  else {
    echo t("Error!") . "\n";
  }
  echo t(
      "@count agendas from year @year were imported.", [
        '@count' => $count,
        '@year'  => $year,
      ]
    ) . "\n";
}

/**
 * Fetch an agenda from OpenLeg with the given year and agenda no.
 *
 * Update/create agenda nodes based on the result.
 *
 * @param int $agenda_year
 *   The agenda year.
 * @param int $agenda_week
 *   The agenda week.
 *
 * @return bool
 *   True if the fetch/save was successful.
 */
function nys_agenda_import_fetch($agenda_year, $agenda_week) {
  $ol_base_url = variable_get("openleg_base_url");
  $base_agenda_url = $ol_base_url . "/api/3/agendas/";
  $openleg_key = variable_get("openleg_key");

  $agenda_url = $base_agenda_url . $agenda_year . "/" . $agenda_week .
    "?key=" . $openleg_key;

  echo "Fetching: " . $agenda_url . "\r\n";
  $agenda_result = file_get_contents($agenda_url);
  $agenda_result = json_decode($agenda_result);

  if (isset($agenda_result->success) && $agenda_result->success) {
    // Iterate through each committee, updating/creating data for each one.
    foreach ($agenda_result->result->committeeAgendas->items as $comm_agenda) {
      $vote_map = nys_agenda_import_get_vote_map($comm_agenda);
      foreach ($comm_agenda->addenda->items as $meeting) {
        nys_agenda_import_save_comm_meeting($meeting, $vote_map);
      }
    }

    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Insert/Update data for a single meeting of a committee on the agenda.
 *
 * @param $meeting object OpenLeg meeting data read from JSON response.
 * @param $vote_map array map of all votes for the committee across all addenda.
 */
function nys_agenda_import_save_comm_meeting($meeting, $vote_map) {
  $committee_name = $meeting->committeeId->name;
  $agenda_year = $meeting->agendaId->year;
  $agenda_week = $meeting->agendaId->number;
  $addendum_id = $meeting->addendumId;
  $meeting_date_time = $meeting->meeting->meetingDateTime;

  $meeting_nid = nys_agenda_import_get_existing_nid(
    $committee_name, $meeting_date_time, $addendum_id
  );

  // Create or update existing agenda record.

  if ($meeting_nid === FALSE) {
    // Create a new agenda.
    $node = new stdClass();
    $node->title = $agenda_year . " Week " . $agenda_week . " "
      . $committee_name . " (" . $meeting->meeting->meetingDateTime . ")";
    $node->type = "agenda";
  }
  else {
    // Update the existing meeting.
    $node = node_load($meeting_nid);

    // Remove existing collections, those will be recreated.
    if (isset($node->field_ol_agenda_bills["und"])
      && is_array(
        $node->field_ol_agenda_bills["und"]
      )
    ) {
      $fields = [];
      foreach ($node->field_ol_agenda_bills["und"] as $index => $value) {
        $fields[] = $value["value"];
        unset($node->field_ol_agenda_bills["und"][$index]);
      }
      entity_delete_multiple('field_collection_item', $fields);
    }
  }

  // Map the meeting's fields.
  nys_agenda_import_set_values(
    $node, $meeting, $committee_name, $agenda_year, $agenda_week
  );

  if ($meeting_nid === FALSE) {
    // Create a new agenda meeting node.
    node_object_prepare($node);
    $node->uid = "1";
  }

  node_save($node);

  // Map the agenda's field collections.
  nys_agenda_import_set_field_collection($node, $meeting, $vote_map);
}

/**
 * Query for the node id of an existing agenda.
 *
 * @param $committee_name
 * @param $meeting_date_time
 * @param $addendum_id
 *
 * @return mixed
 */
function nys_agenda_import_get_existing_nid(
  $committee_name, $meeting_date_time, $addendum_id
) {
  $agenda_query = db_select('node');
  $agenda_query->join(
    'field_data_field_ol_meeting_date', 'date',
    'date.entity_id = node.nid'
  );
  $agenda_query->join(
    'field_data_field_ol_committee_name', 'comm_name',
    'comm_name.entity_id = node.nid'
  );
  $agenda_query->leftJoin(
    'field_data_field_ol_agenda_addendum', 'addendum',
    'addendum.entity_id = node.nid'
  );
  $agenda_query = $agenda_query->fields('node', ['nid'])
    ->condition(
      'date.field_ol_meeting_date_value',
      strtotime($meeting_date_time)
    )
    ->condition(
      'comm_name.field_ol_committee_name_value', $committee_name
    );

  // Addendum query parameters.
  if (empty($addendum_id)) {
    // Look for no addendum id if this is default addendum.
    $agenda_query->isNull('addendum.entity_id');
  }
  else {
    $agenda_query->condition(
      'addendum.field_ol_agenda_addendum_value', $addendum_id
    );
  }
  return $agenda_query->execute()->fetchField();
}

/**
 * Generate a map of billid->vote for all votes in the given committee agenda.
 *
 * @param $comm_agenda
 *
 * @return array
 */
function nys_agenda_import_get_vote_map($comm_agenda) {
  $vote_map = [];
  foreach ($comm_agenda->addenda->items as $meeting) {
    if (!$meeting->hasVotes) {
      continue;
    }
    foreach ($meeting->voteInfo->votesList->items as $vote) {
      $print_no = $vote->bill->printNo;
      $vote_map[$print_no] = $vote;
    }
  }
  return $vote_map;
}

