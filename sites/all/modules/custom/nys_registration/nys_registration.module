<?php
/**
 * @file
 * nys-registration module for ctools miltistep form wizard.
 */
global $user;

// Default minimum age for unconfirmed accounts before they are
// automatically selected for purge by user-purge drush command.
define('NYS_REGISTRATION_DEFAULT_UNCONFIRMED_LIFETIME', 7);

// TODO: What is this?
// This is here because nys_registration.wizard.inc calls
// user_hash_password() to set an initial random password
// on a new account.  There is probably a better way to
// handle this.
require DRUPAL_ROOT . '/includes/password.inc';

/**
 * Implements hook_menu().
 */
function nys_registration_menu() {
  $items = array();

  $items['registration/%ctools_js/form'] = array(
    'title'           => 'Registration',
    'page callback'   => 'nys_registration_form',
    'page arguments'  => array(1),
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
    'file' => 'inc/nys_registration.wizard.inc'
  );
  $items['registration/%ctools_js/login'] = array(
    'title' => 'Login',
    'page callback' => 'nys_registration_login',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['registration/%ctools_js/login/%'] = array(
    'title' => 'Post-Login Action',
    'page callback' => 'nys_registration_login_success',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['registration/password-reset'] = array(
    'title' => 'Password Reset',
    'page callback' => 'nys_registration_password_reset',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_get_item_alter().
 */
function nys_registration_menu_get_item_alter(&$router_item, $path, $original_map) {
  global $user;
  // Ensure user does not have the the 'administrator' or 'web administrator' role.
  if (!in_array(array('administrator', 'web_administrator'), $user->roles)) {
    //switch theme for user edit form
    if ($router_item['path'] == 'user/%/edit' && $user->uid != '1') {
      $router_item['theme_callback'] = 'nys_registration_menu_theme_callback';
    }
  }
}

/**
 * Theme callback fuction for setting the user edit theme to nysenate
 */
function nys_registration_menu_theme_callback() {
  return 'nysenate';
}

// add ctools login
function nys_registration_add_ctools_login(){
    //check to see if we are on a node page.
  ctools_include('modal');
  ctools_include('ajax');

  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  drupal_add_js(array(
    'login-modal' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 760,
        'height' => 620,
      ),
      'modalOptions' => array(
        'opacity' => 0.85,
        'background' => '#000',
      ),
      'animation' => 'fadeIn',
      'closeText' => t('X'),
      'throbber' => theme('image', array('path' => ctools_image_path('throbber.gif', 'nys_registration'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
      'closeImage' => theme('image', array('path' => ctools_image_path('modal-close.png', 'nys_registration'), 'alt' => t('Close window'), 'title' => t('Close window'), 'class' => 'img-loader')),
    ),
  ), 'setting');


  // Add CTools' javascript to the page.
  ctools_add_css('login_modal', 'nys_registration');
  ctools_add_js('login_modal', 'nys_registration');
}



/**
 * A modal login callback.
 */
function nys_registration_login($js = NULL) {

  // Fall back if $js is not set.
  if (!$js) {
    return drupal_get_form('user_login');
  }

  //check to see if we are on a node page.
  ctools_include('modal');
  ctools_include('ajax');

  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  $form_state = array(
    'title' => t('Login'),
    'ajax' => TRUE,
    'custom_redirect' => ctools_ajax_text_button(t('Remain Here'), 'registration/nojs/login/inplace', t('Remain Here'), ''),
  );

  $output = ctools_modal_form_wrapper('user_login', $form_state);

  if (!empty($form_state['executed'])) {
    $output = array();
    $output[] = ctools_ajax_command_reload();
  }

  print ajax_render($output);
  exit;
}

/**
 * Post-login processor: should we go to the user account or stay in place?
 */
function nys_registration_login_success($js, $action) {
  if (!$js) {
    // we should never be here out of ajax context
    return MENU_NOT_FOUND;
  }

  ctools_include('ajax');
  ctools_add_js('ajax-responder');

  $commands = array();
  if ($action == 'inplace') {
    // stay here
    $commands[] = ctools_ajax_command_reload();
  }
  else {
    // bounce bounce
    $dashboard_link = substr(l('user/' . $user->uid . '/dashboard/issues'),1);
    $commands[] = ctools_ajax_command_redirect($dashboard_link);
  }
  print ajax_render($commands);
  exit;
}


/**
 * Alter User login form to include ny senate specific content.
 */
function nys_registration_form_user_login_alter(&$form, &$form_state, $form_id) {
  ctools_include('modal');
  ctools_include('ajax');
  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  $explainer_text = '';

  if (arg(2) == 'message-my-senator' && arg(3) !== null) {
    $explainer_text = 'To send a message to Sen. ' . ucfirst(arg(3)) . ', please connect with the Senate by logging in or creating a profile.';
  }

  $form['registration_block_opener'] = array(
    '#markup' => '<div class="c-block c-login">',
    '#weight' => 91,
  );

  if ($explainer_text !== '') {
    $form['registration_explainer_preface'] = array(
      '#markup' => '<div class="c-login-center">
                  <h3 class="nys-title">',
      '#weight' => 92,
    );
    $form['registration_explainer_content'] = array(
      '#markup' => $explainer_text,
      '#weight' => 93,
    );
    $form['registration_explainer_post'] = array(
      '#markup' => '</h3></div>',
      '#weight' => 94,
    );
  }

  $form['registration_teaser'] = array(

    '#markup' => '
    <div class="c-login-left">
    <h3 class="nys-title">Why connect with the NY State Senate?</h3>
    <ul class="c-login-benefits">
      <li>Let us know where you stand (\'AYE\' or \'NAY\') on key legislation.</li>
      <li>Follow issues, committees, and bills that matter to you.</li>
      <li>Sign petitions with a single click.</li>
      <li>Find and contact your senator. If you would like to find your Senator without first creating an account, <a href="/find-my-senator">click here</a>.</li>
    </ul>
    <a href="/registration/nojs/form/start" class="c-block--btn c-login-create">Create Account</a>
    <p class="c-login-privacy">Your privacy is guaranteed.<br/><a href="/why-you-should-create-account">Need more reasons to create an NYSenate.gov account</a>?</p>
    </div>',
  '#weight' => 95,
  );

  $form['login_right_top'] = array(
    '#weight'=> 96,
    '#markup' => '<div class="c-login-right"><h3 class="nys-title">'.t('I already have an account...').'</h3>'
  );

  $form['name']['#weight']= 97;
  $form['pass']['#weight'] = 98;

  $form['account']['intro'] = array(
  '#markup' => '',
  '#weight' => 0
  );

  $form['actions']['submit'] = array(
  '#value' => 'Login to account',
  '#type' => 'submit',
  '#attributes' => array('class' => ''),
  '#weight' => 100
  );

  $form['remember_me']['#weight'] = 101;

  $form['forgot_pass'] = array(
    '#type' => 'container',
    '#weight' => 102,
    'lost-password' => array(
      '#markup' => '<a href="/user/password" class="c-login--pwd-reset">I forgot my password</a>',
    )
  );

  $form['actions']['submit']['#attributes']['class'] = 'c-block--btn';

  // Add the previous URL if this is a redirection
  if ($_GET['q'] == 'user/login' && ($_GET['destination'] ?? 'user/login') != $_GET['q']) {
    $form['destination'] = [
      '#type' => 'hidden',
      '#value' => $_GET['destination'],
    ];
  }

  $form['login_right_bottom'] = array(
  '#weight'=> 10001,
  '#markup' => '</div>'
  );

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nys_registration_form_user_pass_alter(&$form, &$form_state) {
  //check to see if we are on a node page.
  ctools_include('modal');
  ctools_include('ajax');
  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  honeypot_add_form_protection($form, $form_state, array('honeypot', 'time_restriction'));

  $form['reset_intro'] = array(
    '#markup' => '<h2 class="nys-title">Reset Password</h2>',
    '#weight' => 0
  );

  $form['description'] = array(
    '#markup' => '<p>Please enter your email address and we\'ll send you a link to reset your NYSenate.gov password.</p>',
    '#weight' => 2
  );

  $form['small_text'] = array(
    '#markup' => '<p class="c-login--caveat"><span>*</span> You must log out to use the password reset link in the e-mail.</p>',
    '#weight' => 3
  );

  $form['name'] = array(
    '#title' => 'email address',
    '#type' => 'textfield',
    '#required' => true,
    '#weight' => 5,
  );

  $form['actions']['submit'] = array(
    '#value' => 'send reset link',
    '#type' => 'submit',
    '#attributes' => array('class' => ''),
    '#weight' => 6,
  );

  return $form;
}

/**
 * Generate URL of Parent Page of the Model
 */
function nys_registration_get_overlay_parent_path() {
  global $base_url;
  // Get the HTTP Referer.
  $referer = $_SERVER['HTTP_REFERER'];
  // Check for and remove the base url to return just the relative path.
  // Otherwise, return the referer as is.
  if (strpos($referer, $base_url) === 0) {
    $parent_path = substr($referer, strlen($base_url));
  }
  else {
    $parent_path = $referer.$uid;
  }

  return $parent_path;
}

/**
 * Set destination for user login. this redirects user to dashboard.
 */
function nys_registration_user_login(&$edit, $account) {
  // Check if user has logged in with one time link.
  if (!isset($_POST['form_id']) || $_POST['form_id'] == 'user_pass_reset') {
    $_GET['destination'] = 'password-reset?one-time-link=1';
  }
  elseif (in_array('Constituent', $account->roles)
    && !($_GET['destination'] ?? TRUE)) {
    $_GET['destination'] = 'user/' . $account->uid . '/dashboard/issues';
  }
  if (!((boolean) $account->access)) {
    $params = ['subject' => 'Welcome to NYSenate.gov'];
    drupal_mail('nys_registration', 'site_onboarding', $account->mail, language_default(), $params);
  }
}

/**
 * Implements hook_form_alter().
 */
function nys_registration_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if (!($form_id == 'user_profile_form')) {
    return;
  }

  // Determine if there is a password history.  If not, then consider this a
  // first-time login.
  $pw_history = ($form['#user']->password_history ?? []);
  $current_pw = ($form['#user']->pass ?? '');
  $has_history = FALSE;
  if (is_array($pw_history)) {
    foreach ($pw_history as $val) {
      if ($val->pass != $current_pw) {
        $has_history = TRUE;
      }
    }
  }

  $name = str_replace('_', '', $form['#user']->name);
  $uid = $form['#user']->uid;
  $slug = strtolower($name);
  $form['account']['current_pass']['#weight'] = 10;
  $form['account']['pass']['#weight'] = 11;
  unset($form['timezone']);
  unset($form['contact']);
  unset($form['field_district']);
  unset($form['picture']['picture_delete']);
  unset($form['picture']['picture_upload']['#description']);
  $form['#user']->name = 'Your Profile';
  $form['reset_password']['#weight'] = -15;
  $form['reset_password']['#markup'] = '<a href="/registration/password-reset" class="user-edit-reset">Reset Password</a>';
  $form['back_link']['#weight'] = -17;
  $form['back_link']['#markup'] = '<a href="/users/' . $slug . '/dashboard/issues" class="c-link--back-dashboard">Back to your dashboard</a>';
  $form['field_first_name']['#weight'] = 1;
  $form['field_last_name']['#weight'] = 1;
  $form['field_dateofbirth'][LANGUAGE_NONE][0]['#title'] = 'Date of Birth (Optional)';
  $form['field_gender_user'][LANGUAGE_NONE]['#title'] = 'Gender (Optional)';
  $form['field_top_issue'][LANGUAGE_NONE]['#title'] = 'Select your Top issue:';
  $form['picture']['picture_upload']['#title'] = "Edit Profile Picture";
  $form['link']['#access'] = FALSE;
  $form['field_address']['#access'] = TRUE;
  $form['field_user_receive_emails'][LANGUAGE_NONE]['#title'] = 'Let my Senator contact me.';
  $form['field_user_receive_emails']['#weight'] = 2;
  $form['account']['current_pass']['#access'] = TRUE;
  $form['account']['current_pass']['#description'] = 'Enter your current password to change your E-mail address.';
  $form['account']['pass']['#access'] = FALSE;

  // Simplify form for users logging in with one time link to change password.
  if (!empty($_GET['one-time-link'])) {
    // Disable most fields this way.
    foreach ($form as $field => $value) {
      if ($field != 'account' && strpos($field, 'field') === 0) {
        $form[$field]['#access'] = FALSE;
      }
    }
    // Remove validation required for current password.
    if (!empty($form['#validate'])) {
      foreach ($form['#validate'] as $key => $val) {
        if ($val == 'user_validate_current_pass') {
          unset($form['#validate'][$key]);
        }
      }
    }
    // Hide the remaining unnecessary fields.
    $form['picture']['#access'] = FALSE;
    $form['account']['mail']['#access'] = FALSE;
    $form['reset_password']['#access'] = FALSE;

    // Update section header title.
    $form['#user']->name = $has_history ? 'Change Your Password' : 'Create A Password';

    // Make sure form does not go back to password change.
    $form['#action'] = '/user/' . $uid . '/edit';

    // Enable the password fields.
    $form['account']['pass']['#access'] = TRUE;

    // Disable the "current password" field, since it is being reset.
    unset($form['account']['current_pass']);
  }


  //$form['#submit'][] = 'nys_registration_user_to_district';
}

/**
 * Implements hook_user_presave().
 */
function nys_registration_user_presave(&$edit, $account, $category) {
  // If an address is available, and the account is not new, execute the call.
  // New users have already called SAGE in nys_registrations.
  $is_new = isset($edit['is_new']) ? $edit['is_new'] : FALSE;
  if (isset($edit['field_address'][LANGUAGE_NONE][0]) && !$is_new) {
    // Prepare params for API call.
    $data = array_merge($edit['field_address'][LANGUAGE_NONE][0], array('email' => $edit['mail']));
    $params = nys_sage_prep_params($data);

    // Call SAGE API.
    $response = nys_sage_call_api($params);

    // If an acceptable match was found ...
    if ($response->acceptableMatch) {
      // ... Record it in the originating form data.
      $edit['field_address'][LANGUAGE_NONE][0]['street'] = $response->address->addr1;
      $edit['field_address'][LANGUAGE_NONE][0]['additional'] = $response->address->addr2;
      $edit['field_address'][LANGUAGE_NONE][0]['city'] = $response->address->city;
      $edit['field_address'][LANGUAGE_NONE][0]['province'] = $response->address->state;
      $edit['field_address'][LANGUAGE_NONE][0]['postal_code'] = $response->address->zip5;

      // Also get the district's taxonomy id.
      $district_tid = nys_utils_lookup_district_tid($response->districts->senate->district);
      $edit['field_district'][LANGUAGE_NONE][0]['target_id'] = (string) $district_tid;
    } else {
      // No district?  Make sure form data reflect that.
      $edit['field_district'][LANGUAGE_NONE][0]['target_id'] = "0";
    }
  }
}

/**
 * Implements drupal_mail().
 */
function nys_registration_password_reset() {
  global $user;
  if (!empty($user->uid) && !empty($user->mail)) {
    $op = 'password_reset';
    $status = _user_mail_notify($op, $user);
    if ($status) {

      drupal_set_message(t('An email has just been sent to @email. You can reset your password by visiting the URL that is provided in that email. You must log out for the password reset to work. <a href="/user/logout">Click Here to Log Out.</a>', array('@email' => $user->mail)), 'status', FALSE);

    }
  }
  return drupal_get_form('user_login');
}

/**
 * Implements hook_preprocess_page().
 */
function nys_registration_preprocess_page(&$vars) {
  $pathing = arg();

  // Only act on the password-reset page.
  if ($pathing[0] == 'password-reset') {
    nys_registration_preprocess_password_reset($vars);
  }
}

/**
 * Preprocess function for password reset page.
 *
 * @param $vars
 */
function nys_registration_preprocess_password_reset(&$vars) {
  global $user;

  // We should only be acting on logged-in users.
  // If there is not a valid user, send them to the login page.
  if (!(int) $user->uid) {
    drupal_goto('/user/login');
  }

  // Determine if there is a password history.  If not, then consider this a
  // first-time login.
  $pw_history = ($user->password_history ?? []);
  $current_pw = ($user->pass ?? '');
  $has_history = FALSE;
  if (is_array($pw_history)) {
    foreach ($pw_history as $val) {
      if ($val->pass != $current_pw) {
        $has_history = TRUE;
      }
    }
  }

  // Set up some properties for display.
  $vars['user_id'] = $user->uid;
  $vars['logo_path'] = '/sites/all/themes/nysenate/images/senate_seal_icon.png';

  // Set up language variances based on first-time logins.
  if ($has_history) {
    $vars['form_title'] = 'Change Your Password';
    $vars['greeting'] = 'Please enter a new password for your account.';
  }
  else {
    $vars['form_title'] = 'Create a Password';
    $vars['greeting'] = 'Please create a password for your account.';
  }

  // Render the form and make it available to the template.
  $the_form = drupal_get_form('nys_registration_password_reset_form');
  $vars['render_form'] = drupal_render($the_form);
}

/**
 * Create the password reset form.
 */
function nys_registration_password_reset_form($form, &$form_state) {
  global $user;

  // Required to leverage Drupal's built-in handler for password changes.
  require_once 'modules/user/user.pages.inc';

  // Setting some properties for drupal's standard account form handler.
  $form_state['user'] = $user;
  $form['#user'] = $user;
  $form['#user_category'] = 'account';

  // Set up the actual form.
  $form['account']['pass'] = [
    '#type' => 'password_confirm',
    '#size' => 25,
    '#description' => t('Provide the same password in both fields.'),
    '#required' => TRUE,
  ];

  // Add a submit button.
  $form['actions'] = ['#type' => 'actions'];
  $form['actions']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Save'),
  ];

  // Set the submit handlers to use our custom, followed by Drupal's built-in.
  $form['#submit'] = [
    'nys_registration_password_reset_form_submit',
    'user_profile_form_submit',
  ];

  // Add our custom CSS.
  $form['#attached']['css'] = ['sites/all/modules/custom/nys_registration/css/nys_registration.css'];

  // Add the post-submit redirection.  See the submit handler for more info.
  $form_state['custom_redirect'] = '/user/' . $user->uid . '/edit';

  return $form;
}

/**
 * Custom form submit handler for password reset.  This handler is only here
 * to make sure the redirect value is propagated.  Once the form is submitted,
 * during drupal_build_form(), Drupal tries to read the pre-existing form_state
 * from cache.  If successful, certain keys (see form_state_keys_no_cache()) are
 * removed from form_state.
 *
 * @param $form
 * @param $form_state
 */
function nys_registration_password_reset_form_submit($form, &$form_state) {
  if (isset($form_state['custom_redirect'])) {
    $form_state['redirect'] = $form_state['custom_redirect'];
  }
}

/**
 * Implements hook_mail().
 */
function nys_registration_mail($key, &$message, $params) {
  $content = '';
  switch ($key) {
    case 'site_onboarding':
      $content = '<p>Welcome to NYSenate.gov, the most efficient way for New Yorkers to contact their lawmakers in the State Senate. We encourage you to use the tools available on the website to make your voice be heard. Here are a few components of NYSenate.gov that might be especially helpful.</p>' .
        '<h2>Support or oppose bills</h2><p>You can let your senator know where you stand by visiting any bill page and clicking "aye" or "nay". You can also "follow" the bill, which allows you to track it as it moves through the senate, assembly, and the governor\'s office. You automatically receive email alerts when there is significant legislative activity related to bills that you support or oppose. You can opt out of that setting in your profile.</p>' .
        '<h2>Bill Alerts</h2><p>You can subscribe to receive email alerts when important events occur in the life cycle of a bill that you are interested. You can subscribe to receive updates on any bill, and you have the option of auto-subscribing when you support or oppose bills. You will continue to receive alerts on a bill in the event it is reintroduced under a different print number in a subsequent legislative term.</p>' .
        '<h2>Find and follow issues</h2><p>When a senator posts content — whether it be a bill, resolution, an article, or a press release — they often tag it with the issue being addressed. On NYSenate.gov, you can "follow" the issues you care about. To find them, check out the issue explorer. When you follow an issue, relevant content will appear on your dashboard.</p>' .
        '<h2>Share additional thoughts on bills</h2><p>Whenever you support, oppose and/or follow a bill, you can include a message to your senator letting them know why you feel one way or another.</p>' .
        '<h2>Stay informed with your personal dashboard</h2><p>Check your dashboard from time to time, where you can learn about action on bills you\'ve supported, opposed, or followed. You can also review a list of all the petitions you’ve signed.</p>';
      break;
  }
  if ($content) {
    $message['body'] = [$content];
  }
  if (isset($params['subject'])) {
    $message['subject'] = $params['subject'];
  }
}

/**
 * Implements hook_mail_alter().
 * TODO: This should be obsolete now.
 *
 * @param $message
 */
function nys_registration_mail_alter(&$message) {
  $html_emails = ['register_no_approval_required', 'site_onboarding'];
  $key = nys_av('key', $message, '');
  if (in_array($key, $html_emails)) {
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  }
}

/**
 * Implements hook_nys_sendgrid_format_alter().
 */
function nys_registration_nys_sendgrid_format_alter(&$message) {
  $id = $message['id'] ?? FALSE;
  $sgm = &$message['params']['sendgrid_mail'];

  /* @var $sgm \SendGrid\Mail\Mail */
  $persons = $sgm->getPersonalizations();

  switch ($id) {
    case 'user_register_no_approval_required':
      global $user;
      $url = user_pass_reset_url(user_load($user->uid));
      foreach ($persons as $person) {
        $person->addSubstitution('oneTimeLoginUrl', $url);
      }
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add the default personal contact setting on the user settings page.
 *
 * @see user_admin_settings()
 */
function nys_registration_form_user_admin_settings_alter(&$form, &$form_state) {
  $form['registration_cancellation']['nys_registration_unconfirmed_lifetime'] = array(
    '#type' => 'textfield',
    '#size' => 1,
    '#title' => t('Maximum Unconfirmed Lifetime'),
    '#description' => t('The number of days unconfirmed accounts will wait for confirmation.  After this time period, the account will be eligble for automatic purge.'),
    '#default_value' => variable_get('nys_registration_unconfirmed_lifetime', NYS_REGISTRATION_DEFAULT_UNCONFIRMED_LIFETIME),
  );
}
