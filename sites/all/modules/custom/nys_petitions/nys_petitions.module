<?php
/**
 * @file
 * This module contains code to add functionality to petitions nodes.
 */

require_once 'includes/petition_form.inc';

/**
 * Include new updates file.
 */
require_once dirname(__FILE__) . '/includes/nys_petitions.updates.inc';


/**
 * Implements hook_module_implements_alter().
 */
function nys_petitions_module_implements_alter(&$implementations, $hook) {
  if ($hook != 'user_login') {
    return;
  }

  // Move user_login hook to the top to circumvent default flag module behavior.
  $group = array('nys_petitions' => $implementations['nys_petitions']);
  unset($implementations['nys_petitions']);
  $implementations = $group + $implementations;
}

/**
 * Implements hook_node_view().
 */
function nys_petitions_node_view($node, $view_mode, $langcode) {
  if ($node->type != 'petition' || $view_mode != 'full') {
    return;
  }

  // If there's no alias for this petitions node, redirect to 404.
  $current_path = current_path();
  $path_alias = drupal_lookup_path('alias', $current_path);
  if (!$path_alias) {
    drupal_not_found();
  }

  // Generate the render array for the petition form.
  $node->content['petition_form'] = drupal_get_form('nys_petitions_petition_form', $node);

  // Generate the link to user/login, incl. the destination canary.
  $anchor_text = t('Logged-in users can sign with one click.');
  $anchor_dest = 'user/login';
  $anchor_opt = ['query' => ['destination' => $path_alias]];
  $node->content['petition_login_link'] = l($anchor_text, $anchor_dest, $anchor_opt);
}

/**
 * Implements hook_node_view_alter().
 */
function nys_petitions_node_view_alter(&$build) {
  // This section is solely for questionnaires.  It has nothing to do
  // with petitions, and appears in this module solely as a legacy item.
  // This should be placed in the questionnaire module when it is
  // established.
  if ($build['#bundle'] == 'webform') {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'questionnaire')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_webform', 'target_id', $build['#node']->nid);
    $result = $query->execute();

    if (($result['node'] ?? FALSE) && ($key = key($result['node']))) {
      hide($build['links']);
      $build['webform']['#form']['questionnaire_source_id'] = [
        '#type' => 'hidden',
        '#value' => $key,
        '#name' => 'questionnaire_source_id',
      ];
    }

  }
}

/**
 * Implements hook_user_login().
 */
function nys_petitions_user_login(&$edit, $account) {
  nyslog();

  // This should only act on a user's first login, determined
  // by $account->access==0.
  if (!((boolean)$account->access)) {

    // Load the full user.
    $this_user = user_load($account->uid);
    if ($this_user) {

      // Grab any anonymous petition records showing the
      // same email address.  The fid is the flagging PK.
      // The sid is nys_petitions PK.
      // TODO: we may want to filter this by timestamp range.
      $petition_records = db_select('nys_petitions')
        ->fields('nys_petitions', array('sid','pid','fid','email'))
        ->condition('email', $this_user->mail)
        // This is now limited to the most-recent record.
        ->orderBy('sid','DESC')
        ->range(0,1)
        ->execute()
        ->fetchAllAssoc('fid', PDO::FETCH_ASSOC);

      // For each petition record returned, update the flagging
      // table to show the new user id and trigger an accumulator
      // event for "petition/signature update".
      if (count($petition_records)) {
        $all_ids = array_keys($petition_records);
        $flag_update = db_update('flagging')
          ->fields(array('uid' => $this_user->uid, 'sid' => 0))
          ->condition('flagging_id', $all_ids)
          ->execute();

        // TODO: Implement sanity check/error reporting?
        // Here, $flag_update should hold number of rows changed.

        // remove the anonymous petition records
        db_delete('nys_petitions')
          ->condition('email', $this_user->mail)
          ->condition('fid', $all_ids)
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function nys_petitions_entity_insert($entity, $type) {
  nyslog(__FUNCTION__);

  // This only acts on flagging activity for "sign_petition" flags.
  if ($type != 'flagging' || $entity->flag_name != 'sign_petition') {
    nyslog("Nothing to do, returning");
    return;
  }

  nyslog("sign_petition flag found, updating nys_petitions");
  // Add the flagging id to the petition signature of the same session.
  $flagging_id = $entity->flagging_id;
  db_update('nys_petitions')
    ->fields(array(
      'fid' => $flagging_id,
    ))
    ->condition('session_id', $entity->sid)
    ->condition('fid', 0)
    ->condition('pid', $entity->entity_id)
    ->execute();
}

/**
 * Implements hook_nys_accumulator_user_info().
 */
function nys_petitions_nys_accumulator_user_info($user, $response, $options) {
  nyslog();

  // Only do work if flagging_id is set, user is not logged in, and msg_type is petition
  $fid = 0;
  if (isset($options['flagging']) && isset($options['flagging']->flagging_id)) {
    $fid = (int) $options['flagging']->flagging_id;
  }
  if ($user->uid != 0 || !$fid || $response['msg_type'] != 'petition') {
    nyslog("failed to find actionable conditions: user id={$user->uid}, fid=$fid, msg={$response['msg_type']}");
    return $response;
  }

  // Get the anonymous row from petitions based on flagging_id
  $petition_row = db_select('nys_petitions', 'a')
    ->fields('a')
    ->condition('fid', $options['flagging']->flagging_id)
    ->execute()
    ->fetchAll();
  if (empty($petition_row[0]->email)) {
    nyslog("failed to find fid=" . $options['flagging']->flagging_id);
    return $response;
  }

  // Set up the user info array
  $petition_info = array(
    'signing_id' => $petition_row[0]->sid,
    'user_email' => $petition_row[0]->email,
    'first_name' => $petition_row[0]->first_name,
    'last_name' => $petition_row[0]->last_name,
    'user_address' => $petition_row[0]->addr_street,
    'user_city' => $petition_row[0]->addr_city,
    'user_state' => $petition_row[0]->addr_state,
    'user_zipcode' => $petition_row[0]->addr_zip,
    'district_number' => $petition_row[0]->district_number,
    'district_id' => $petition_row[0]->district_id,
    'senator_node' => $petition_row[0]->senator,
  );

  // Apply it to the response.
  if (!isset($response['msg_info'])) {
    $response['msg_info'] = array();
  }
  $response['msg_info']['form_info'] = $petition_info;

  return $response;
}

/*
 * Implements hook_cron_queue_info().
 *
 * This queue holds notification items for expiring Petition and Questionnaire
 * nodes.
 */
function nys_petitions_cron_queue_info() {
  $queues['nys_petitions_process_expiring'] = [
    'worker callback' => 'nys_petitions_process_expiring',
  ];
  $queues['nys_petitions_process_expired'] = [
    'worker callback' => 'nys_petitions_process_expired',
  ];
  return $queues;
}

/**
 * Implements hook_cron().
 */
function nys_petitions_cron() {
  $expiring_queue = DrupalQueue::get('nys_petitions_process_expiring');
  // Create queue items for expiring petitions and questionnaires.
  foreach (nys_petitions_get_expiring() as $nid) {
    $expiring_queue->createItem(['nid' => $nid]);
  }
  $expired_queue = DrupalQueue::get('nys_petitions_process_expired');
  // Create queue items for expired petitions and questionnaires.
  foreach (nys_petitions_get_expired() as $nid) {
    $expired_queue->createItem(['nid' => $nid]);
  }
}

/**
 * @return array
 *   Petition and questionnaire node ids that are within 2 days of expiring.
 */
function nys_petitions_get_expiring() {
  $node_ids = [];
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', ['petition', 'questionnaire'], 'IN')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_expiration_date', 'value', REQUEST_TIME, '>')
    ->fieldCondition('field_expiration_date', 'value', strtotime('+2 days', REQUEST_TIME), '<');

  $result = $query->execute();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    foreach ($nids as $nid) {
      $node = entity_metadata_wrapper('node', $nid);
      if (strtotime('+2 days', $node->field_last_notified->value()) < $node->field_expiration_date->value()) {
        $node_ids[] = $nid;
      }
    }
  }

  return $node_ids;
}

/**
 * @return array
 *   Petition and questionnaire node ids that have expired and need processing.
 */
function nys_petitions_get_expired() {
  $node_ids = [];
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', ['petition', 'questionnaire'], 'IN')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_expiration_date', 'value', REQUEST_TIME, '<=');

  $result = $query->execute();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    foreach ($nids as $nid) {
      $node = entity_metadata_wrapper('node', $nid);
      if ($node->field_last_notified->value() < $node->field_expiration_date->value()) {
        $node_ids[] = $nid;
      }
    }
  }

  return $node_ids;
}

/**
 * Queue worker callback for expiring nodes.
 */
function nys_petitions_process_expiring($data) {
  nys_petitions_send_mail($data['nid'], 'expiring');
  $node_wrapper = entity_metadata_wrapper('node', $data['nid']);
  if ($node_wrapper->value()) {
    // Update last notified field so we don't resend the email.
    $node_wrapper->field_last_notified = REQUEST_TIME;
    $node_wrapper->save();
  }
}

/**
 * Queue worker callback for expired nodes.
 */
function nys_petitions_process_expired($data) {
  nys_petitions_send_mail($data['nid'], 'expired');
  $node_wrapper = entity_metadata_wrapper('node', $data['nid']);
  if ($node_wrapper->value()) {
    // Update last notified field so we don't resend the email.
    $node_wrapper->field_last_notified = REQUEST_TIME;
    // Unpublish the node.
    $node_wrapper->status = 0;
    $node_wrapper->save();
  }
}

/**
 * Sends email(s) to the addresses stored on Senator Direct Message fields.
 *
 * @param int $nid
 *   The relevant petition or questionnaire node id.
 * @param string $key
 *   A unique string to identify what email content should be used.
 */
function nys_petitions_send_mail($nid, $key) {
  // Set up the absolute url with alias to content.
  global $base_url;
  if (($_ENV['PANTHEON_ENVIRONMENT'] ?? '') === "live") {
    $base_url = 'https://www.nysenate.gov';
  }
  $url = $base_url . '/' . drupal_get_path_alias('node/' . $nid);
  $node_wrapper = entity_metadata_wrapper('node', $nid);

  // No need to send an email if the node has been deleted.
  if ($node_wrapper->value()) {
    // Some nodes aren't associated with a Senator. No email for those.
    if ($node_wrapper->field_senator->value() !== NULL) {
      $senator_emails = $node_wrapper->field_senator->field_message_notification_email->value();
      $senator_status = $node_wrapper->field_senator->field_active->value();
      // The senator must be active and have an email.
      if ($senator_status and !empty($senator_emails)) {
        switch ($key) {
          case 'expiring':
            $subject = "Content will expire soon - " . $node_wrapper->title->value();
            $expire_date = date('l M jS Y', $node_wrapper->field_expiration_date->value());
            $notice = "This item is set to be unpublished from NYSenate.gov on " . $expire_date;
            $body = "Hello,\r\n\r\n" . $notice . ":\r\n\r\n" .
                    $node_wrapper->title->value() . "\r\n\r\n" . $url . "\r\n\r\nIn order to keep interactive components of NYSenate.gov fresh and relevant, questionnaires and petitions are unpublished automatically after a period of time. Your office may edit the the expiration date if you would like the item to remain published until an appropriate date in the future. \r\n\r\n" .
                    $base_url . "/node/" . $nid . "/edit \r\n\r\nThank you,\n\r\nNY Senate web team.";
            break;
          case 'expired':
            $subject = "Content has expired - " . $node_wrapper->title->value();
            $notice = "This item has been unpublished from NYSenate.gov:";
            $body = "Hello,\r\n\r\n" . $notice . ":\r\n\r\n" .
                    $node_wrapper->title->value() . "\r\n\r\n" . $url . "\r\n\r\nIn order to keep interactive components of NYSenate.gov fresh and relevant, questionnaires and petitions are unpublished automatically after a period of time. If you would like to undo this, your office can republish the item. Don't forget to change the expiration date to an appropriate date in the future. \r\n\r\n" .
                    $base_url . "/node/" . $nid . "/edit \r\n\r\nThank you,\n\r\nNY Senate web team.";
            break;
        }
        // The email field can contain multiple values.
        foreach ($senator_emails as $senator_email) {
          $params = ['subject' => $subject, 'body' => $body];
          drupal_mail('nys_petitions', 'content_expire', $senator_email, language_default(), $params);
        }
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function nys_petitions_mail($key, &$message, $params) {
  if (!empty($params['body'])) {
    $message['body'] =  [$params['body']];
  }
  if (!empty($params['subject'])) {
    $message['subject'] = $params['subject'];
  }
}
